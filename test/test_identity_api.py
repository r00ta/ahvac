# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ahvac.api.identity_api import IdentityApi


class TestIdentityApi(unittest.TestCase):
    """IdentityApi unit test stubs"""

    def setUp(self) -> None:
        self.api = IdentityApi()

    def tearDown(self) -> None:
        pass

    def test_alias_create(self) -> None:
        """Test case for alias_create

        Create a new alias.
        """
        pass

    def test_alias_delete_by_id(self) -> None:
        """Test case for alias_delete_by_id

        """
        pass

    def test_alias_list_by_id(self) -> None:
        """Test case for alias_list_by_id

        List all the alias IDs.
        """
        pass

    def test_alias_read_by_id(self) -> None:
        """Test case for alias_read_by_id

        """
        pass

    def test_alias_update_by_id(self) -> None:
        """Test case for alias_update_by_id

        """
        pass

    def test_entity_batch_delete(self) -> None:
        """Test case for entity_batch_delete

        Delete all of the entities provided
        """
        pass

    def test_entity_create(self) -> None:
        """Test case for entity_create

        Create a new entity
        """
        pass

    def test_entity_create_alias(self) -> None:
        """Test case for entity_create_alias

        Create a new alias.
        """
        pass

    def test_entity_delete_alias_by_id(self) -> None:
        """Test case for entity_delete_alias_by_id

        """
        pass

    def test_entity_delete_by_id(self) -> None:
        """Test case for entity_delete_by_id

        """
        pass

    def test_entity_delete_by_name(self) -> None:
        """Test case for entity_delete_by_name

        """
        pass

    def test_entity_list_aliases_by_id(self) -> None:
        """Test case for entity_list_aliases_by_id

        List all the alias IDs.
        """
        pass

    def test_entity_list_by_id(self) -> None:
        """Test case for entity_list_by_id

        List all the entity IDs
        """
        pass

    def test_entity_list_by_name(self) -> None:
        """Test case for entity_list_by_name

        List all the entity names
        """
        pass

    def test_entity_look_up(self) -> None:
        """Test case for entity_look_up

        Query entities based on various properties.
        """
        pass

    def test_entity_merge(self) -> None:
        """Test case for entity_merge

        Merge two or more entities together
        """
        pass

    def test_entity_read_alias_by_id(self) -> None:
        """Test case for entity_read_alias_by_id

        """
        pass

    def test_entity_read_by_id(self) -> None:
        """Test case for entity_read_by_id

        """
        pass

    def test_entity_read_by_name(self) -> None:
        """Test case for entity_read_by_name

        """
        pass

    def test_entity_update_alias_by_id(self) -> None:
        """Test case for entity_update_alias_by_id

        """
        pass

    def test_entity_update_by_id(self) -> None:
        """Test case for entity_update_by_id

        """
        pass

    def test_entity_update_by_name(self) -> None:
        """Test case for entity_update_by_name

        """
        pass

    def test_group_create(self) -> None:
        """Test case for group_create

        """
        pass

    def test_group_create_alias(self) -> None:
        """Test case for group_create_alias

        Creates a new group alias, or updates an existing one.
        """
        pass

    def test_group_delete_alias_by_id(self) -> None:
        """Test case for group_delete_alias_by_id

        """
        pass

    def test_group_delete_by_id(self) -> None:
        """Test case for group_delete_by_id

        """
        pass

    def test_group_delete_by_name(self) -> None:
        """Test case for group_delete_by_name

        """
        pass

    def test_group_list_aliases_by_id(self) -> None:
        """Test case for group_list_aliases_by_id

        List all the group alias IDs.
        """
        pass

    def test_group_list_by_id(self) -> None:
        """Test case for group_list_by_id

        List all the group IDs.
        """
        pass

    def test_group_list_by_name(self) -> None:
        """Test case for group_list_by_name

        """
        pass

    def test_group_look_up(self) -> None:
        """Test case for group_look_up

        Query groups based on various properties.
        """
        pass

    def test_group_read_alias_by_id(self) -> None:
        """Test case for group_read_alias_by_id

        """
        pass

    def test_group_read_by_id(self) -> None:
        """Test case for group_read_by_id

        """
        pass

    def test_group_read_by_name(self) -> None:
        """Test case for group_read_by_name

        """
        pass

    def test_group_update_alias_by_id(self) -> None:
        """Test case for group_update_alias_by_id

        """
        pass

    def test_group_update_by_id(self) -> None:
        """Test case for group_update_by_id

        """
        pass

    def test_group_update_by_name(self) -> None:
        """Test case for group_update_by_name

        """
        pass

    def test_mfa_admin_destroy_totp_secret(self) -> None:
        """Test case for mfa_admin_destroy_totp_secret

        Destroys a TOTP secret for the given MFA method ID on the given entity
        """
        pass

    def test_mfa_admin_generate_totp_secret(self) -> None:
        """Test case for mfa_admin_generate_totp_secret

        Update or create TOTP secret for the given method ID on the given entity.
        """
        pass

    def test_mfa_create_duo_method(self) -> None:
        """Test case for mfa_create_duo_method

        Create the given MFA method
        """
        pass

    def test_mfa_create_okta_method(self) -> None:
        """Test case for mfa_create_okta_method

        Create the given MFA method
        """
        pass

    def test_mfa_create_ping_id_method(self) -> None:
        """Test case for mfa_create_ping_id_method

        Create the given MFA method
        """
        pass

    def test_mfa_create_totp_method(self) -> None:
        """Test case for mfa_create_totp_method

        Create the given MFA method
        """
        pass

    def test_mfa_delete_duo_method(self) -> None:
        """Test case for mfa_delete_duo_method

        Delete the given MFA method
        """
        pass

    def test_mfa_delete_login_enforcement(self) -> None:
        """Test case for mfa_delete_login_enforcement

        Delete a login enforcement
        """
        pass

    def test_mfa_delete_okta_method(self) -> None:
        """Test case for mfa_delete_okta_method

        Delete the given MFA method
        """
        pass

    def test_mfa_delete_ping_id_method(self) -> None:
        """Test case for mfa_delete_ping_id_method

        Delete the given MFA method
        """
        pass

    def test_mfa_delete_totp_method(self) -> None:
        """Test case for mfa_delete_totp_method

        Delete the given MFA method
        """
        pass

    def test_mfa_generate_totp_secret(self) -> None:
        """Test case for mfa_generate_totp_secret

        Update or create TOTP secret for the given method ID on the given entity.
        """
        pass

    def test_mfa_list_duo_methods(self) -> None:
        """Test case for mfa_list_duo_methods

        List MFA method configurations for the given MFA method
        """
        pass

    def test_mfa_list_login_enforcements(self) -> None:
        """Test case for mfa_list_login_enforcements

        List login enforcements
        """
        pass

    def test_mfa_list_methods(self) -> None:
        """Test case for mfa_list_methods

        List MFA method configurations for all MFA methods
        """
        pass

    def test_mfa_list_okta_methods(self) -> None:
        """Test case for mfa_list_okta_methods

        List MFA method configurations for the given MFA method
        """
        pass

    def test_mfa_list_ping_id_methods(self) -> None:
        """Test case for mfa_list_ping_id_methods

        List MFA method configurations for the given MFA method
        """
        pass

    def test_mfa_list_totp_methods(self) -> None:
        """Test case for mfa_list_totp_methods

        List MFA method configurations for the given MFA method
        """
        pass

    def test_mfa_read_duo_method(self) -> None:
        """Test case for mfa_read_duo_method

        Read the current configuration for the given MFA method
        """
        pass

    def test_mfa_read_login_enforcement(self) -> None:
        """Test case for mfa_read_login_enforcement

        Read the current login enforcement
        """
        pass

    def test_mfa_read_method(self) -> None:
        """Test case for mfa_read_method

        Read the current configuration for the given ID regardless of the MFA method type
        """
        pass

    def test_mfa_read_okta_method(self) -> None:
        """Test case for mfa_read_okta_method

        Read the current configuration for the given MFA method
        """
        pass

    def test_mfa_read_ping_id_method(self) -> None:
        """Test case for mfa_read_ping_id_method

        Read the current configuration for the given MFA method
        """
        pass

    def test_mfa_read_totp_method(self) -> None:
        """Test case for mfa_read_totp_method

        Read the current configuration for the given MFA method
        """
        pass

    def test_mfa_update_duo_method(self) -> None:
        """Test case for mfa_update_duo_method

        Update the configuration for the given MFA method
        """
        pass

    def test_mfa_update_okta_method(self) -> None:
        """Test case for mfa_update_okta_method

        Update the configuration for the given MFA method
        """
        pass

    def test_mfa_update_ping_id_method(self) -> None:
        """Test case for mfa_update_ping_id_method

        Update the configuration for the given MFA method
        """
        pass

    def test_mfa_update_totp_method(self) -> None:
        """Test case for mfa_update_totp_method

        Update the configuration for the given MFA method
        """
        pass

    def test_mfa_write_login_enforcement(self) -> None:
        """Test case for mfa_write_login_enforcement

        Create or update a login enforcement
        """
        pass

    def test_oidc_configure(self) -> None:
        """Test case for oidc_configure

        """
        pass

    def test_oidc_delete_assignment(self) -> None:
        """Test case for oidc_delete_assignment

        """
        pass

    def test_oidc_delete_client(self) -> None:
        """Test case for oidc_delete_client

        """
        pass

    def test_oidc_delete_key(self) -> None:
        """Test case for oidc_delete_key

        CRUD operations for OIDC keys.
        """
        pass

    def test_oidc_delete_provider(self) -> None:
        """Test case for oidc_delete_provider

        """
        pass

    def test_oidc_delete_role(self) -> None:
        """Test case for oidc_delete_role

        CRUD operations on OIDC Roles
        """
        pass

    def test_oidc_delete_scope(self) -> None:
        """Test case for oidc_delete_scope

        """
        pass

    def test_oidc_generate_token(self) -> None:
        """Test case for oidc_generate_token

        Generate an OIDC token
        """
        pass

    def test_oidc_introspect(self) -> None:
        """Test case for oidc_introspect

        Verify the authenticity of an OIDC token
        """
        pass

    def test_oidc_list_assignments(self) -> None:
        """Test case for oidc_list_assignments

        """
        pass

    def test_oidc_list_clients(self) -> None:
        """Test case for oidc_list_clients

        """
        pass

    def test_oidc_list_keys(self) -> None:
        """Test case for oidc_list_keys

        List OIDC keys
        """
        pass

    def test_oidc_list_providers(self) -> None:
        """Test case for oidc_list_providers

        """
        pass

    def test_oidc_list_roles(self) -> None:
        """Test case for oidc_list_roles

        List configured OIDC roles
        """
        pass

    def test_oidc_list_scopes(self) -> None:
        """Test case for oidc_list_scopes

        """
        pass

    def test_oidc_provider_authorize(self) -> None:
        """Test case for oidc_provider_authorize

        """
        pass

    def test_oidc_provider_authorize_with_parameters(self) -> None:
        """Test case for oidc_provider_authorize_with_parameters

        """
        pass

    def test_oidc_provider_token(self) -> None:
        """Test case for oidc_provider_token

        """
        pass

    def test_oidc_provider_user_info(self) -> None:
        """Test case for oidc_provider_user_info

        """
        pass

    def test_oidc_provider_user_info2(self) -> None:
        """Test case for oidc_provider_user_info2

        """
        pass

    def test_oidc_read_assignment(self) -> None:
        """Test case for oidc_read_assignment

        """
        pass

    def test_oidc_read_client(self) -> None:
        """Test case for oidc_read_client

        """
        pass

    def test_oidc_read_configuration(self) -> None:
        """Test case for oidc_read_configuration

        """
        pass

    def test_oidc_read_key(self) -> None:
        """Test case for oidc_read_key

        CRUD operations for OIDC keys.
        """
        pass

    def test_oidc_read_open_id_configuration(self) -> None:
        """Test case for oidc_read_open_id_configuration

        Query OIDC configurations
        """
        pass

    def test_oidc_read_provider(self) -> None:
        """Test case for oidc_read_provider

        """
        pass

    def test_oidc_read_provider_open_id_configuration(self) -> None:
        """Test case for oidc_read_provider_open_id_configuration

        """
        pass

    def test_oidc_read_provider_public_keys(self) -> None:
        """Test case for oidc_read_provider_public_keys

        """
        pass

    def test_oidc_read_public_keys(self) -> None:
        """Test case for oidc_read_public_keys

        Retrieve public keys
        """
        pass

    def test_oidc_read_role(self) -> None:
        """Test case for oidc_read_role

        CRUD operations on OIDC Roles
        """
        pass

    def test_oidc_read_scope(self) -> None:
        """Test case for oidc_read_scope

        """
        pass

    def test_oidc_rotate_key(self) -> None:
        """Test case for oidc_rotate_key

        Rotate a named OIDC key.
        """
        pass

    def test_oidc_write_assignment(self) -> None:
        """Test case for oidc_write_assignment

        """
        pass

    def test_oidc_write_client(self) -> None:
        """Test case for oidc_write_client

        """
        pass

    def test_oidc_write_key(self) -> None:
        """Test case for oidc_write_key

        CRUD operations for OIDC keys.
        """
        pass

    def test_oidc_write_provider(self) -> None:
        """Test case for oidc_write_provider

        """
        pass

    def test_oidc_write_role(self) -> None:
        """Test case for oidc_write_role

        CRUD operations on OIDC Roles
        """
        pass

    def test_oidc_write_scope(self) -> None:
        """Test case for oidc_write_scope

        """
        pass

    def test_persona_create(self) -> None:
        """Test case for persona_create

        Create a new alias.
        """
        pass

    def test_persona_delete_by_id(self) -> None:
        """Test case for persona_delete_by_id

        """
        pass

    def test_persona_list_by_id(self) -> None:
        """Test case for persona_list_by_id

        List all the alias IDs.
        """
        pass

    def test_persona_read_by_id(self) -> None:
        """Test case for persona_read_by_id

        """
        pass

    def test_persona_update_by_id(self) -> None:
        """Test case for persona_update_by_id

        """
        pass


if __name__ == '__main__':
    unittest.main()
