# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InitializeRequest(BaseModel):
    """
    InitializeRequest
    """ # noqa: E501
    pgp_keys: Optional[List[StrictStr]] = Field(default=None, description="Specifies an array of PGP public keys used to encrypt the output unseal keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as `secret_shares`.")
    recovery_pgp_keys: Optional[List[StrictStr]] = Field(default=None, description="Specifies an array of PGP public keys used to encrypt the output recovery keys. Ordering is preserved. The keys must be base64-encoded from their original binary representation. The size of this array must be the same as `recovery_shares`.")
    recovery_shares: Optional[StrictInt] = Field(default=None, description="Specifies the number of shares to split the recovery key into.")
    recovery_threshold: Optional[StrictInt] = Field(default=None, description="Specifies the number of shares required to reconstruct the recovery key. This must be less than or equal to `recovery_shares`.")
    root_token_pgp_key: Optional[StrictStr] = Field(default=None, description="Specifies a PGP public key used to encrypt the initial root token. The key must be base64-encoded from its original binary representation.")
    secret_shares: Optional[StrictInt] = Field(default=None, description="Specifies the number of shares to split the unseal key into.")
    secret_threshold: Optional[StrictInt] = Field(default=None, description="Specifies the number of shares required to reconstruct the unseal key. This must be less than or equal secret_shares. If using Vault HSM with auto-unsealing, this value must be the same as `secret_shares`.")
    stored_shares: Optional[StrictInt] = Field(default=None, description="Specifies the number of shares that should be encrypted by the HSM and stored for auto-unsealing. Currently must be the same as `secret_shares`.")
    __properties: ClassVar[List[str]] = ["pgp_keys", "recovery_pgp_keys", "recovery_shares", "recovery_threshold", "root_token_pgp_key", "secret_shares", "secret_threshold", "stored_shares"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InitializeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InitializeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pgp_keys": obj.get("pgp_keys"),
            "recovery_pgp_keys": obj.get("recovery_pgp_keys"),
            "recovery_shares": obj.get("recovery_shares"),
            "recovery_threshold": obj.get("recovery_threshold"),
            "root_token_pgp_key": obj.get("root_token_pgp_key"),
            "secret_shares": obj.get("secret_shares"),
            "secret_threshold": obj.get("secret_threshold"),
            "stored_shares": obj.get("stored_shares")
        })
        return _obj


