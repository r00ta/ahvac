# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MountsTuneConfigurationParametersRequest(BaseModel):
    """
    MountsTuneConfigurationParametersRequest
    """ # noqa: E501
    allowed_managed_keys: Optional[List[StrictStr]] = None
    allowed_response_headers: Optional[List[StrictStr]] = Field(default=None, description="A list of headers to whitelist and allow a plugin to set on responses.")
    audit_non_hmac_request_keys: Optional[List[StrictStr]] = Field(default=None, description="The list of keys in the request data object that will not be HMAC'ed by audit devices.")
    audit_non_hmac_response_keys: Optional[List[StrictStr]] = Field(default=None, description="The list of keys in the response data object that will not be HMAC'ed by audit devices.")
    default_lease_ttl: Optional[StrictStr] = Field(default=None, description="The default lease TTL for this mount.")
    description: Optional[StrictStr] = Field(default=None, description="User-friendly description for this credential backend.")
    listing_visibility: Optional[StrictStr] = Field(default=None, description="Determines the visibility of the mount in the UI-specific listing endpoint. Accepted value are 'unauth' and 'hidden', with the empty default ('') behaving like 'hidden'.")
    max_lease_ttl: Optional[StrictStr] = Field(default=None, description="The max lease TTL for this mount.")
    options: Optional[Dict[str, Any]] = Field(default=None, description="The options to pass into the backend. Should be a json object with string keys and values.")
    passthrough_request_headers: Optional[List[StrictStr]] = Field(default=None, description="A list of headers to whitelist and pass from the request to the plugin.")
    plugin_version: Optional[StrictStr] = Field(default=None, description="The semantic version of the plugin to use, or image tag if oci_image is provided.")
    token_type: Optional[StrictStr] = Field(default=None, description="The type of token to issue (service or batch).")
    user_lockout_config: Optional[Dict[str, Any]] = Field(default=None, description="The user lockout configuration to pass into the backend. Should be a json object with string keys and values.")
    __properties: ClassVar[List[str]] = ["allowed_managed_keys", "allowed_response_headers", "audit_non_hmac_request_keys", "audit_non_hmac_response_keys", "default_lease_ttl", "description", "listing_visibility", "max_lease_ttl", "options", "passthrough_request_headers", "plugin_version", "token_type", "user_lockout_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MountsTuneConfigurationParametersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MountsTuneConfigurationParametersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_managed_keys": obj.get("allowed_managed_keys"),
            "allowed_response_headers": obj.get("allowed_response_headers"),
            "audit_non_hmac_request_keys": obj.get("audit_non_hmac_request_keys"),
            "audit_non_hmac_response_keys": obj.get("audit_non_hmac_response_keys"),
            "default_lease_ttl": obj.get("default_lease_ttl"),
            "description": obj.get("description"),
            "listing_visibility": obj.get("listing_visibility"),
            "max_lease_ttl": obj.get("max_lease_ttl"),
            "options": obj.get("options"),
            "passthrough_request_headers": obj.get("passthrough_request_headers"),
            "plugin_version": obj.get("plugin_version"),
            "token_type": obj.get("token_type"),
            "user_lockout_config": obj.get("user_lockout_config")
        })
        return _obj


