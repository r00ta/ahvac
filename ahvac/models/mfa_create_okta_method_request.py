# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MfaCreateOktaMethodRequest(BaseModel):
    """
    MfaCreateOktaMethodRequest
    """ # noqa: E501
    api_token: Optional[StrictStr] = Field(default=None, description="Okta API key.")
    base_url: Optional[StrictStr] = Field(default=None, description="The base domain to use for the Okta API. When not specified in the configuration, \"okta.com\" is used.")
    method_name: Optional[StrictStr] = Field(default=None, description="The unique name identifier for this MFA method.")
    org_name: Optional[StrictStr] = Field(default=None, description="Name of the organization to be used in the Okta API.")
    primary_email: Optional[StrictBool] = Field(default=None, description="If true, the username will only match the primary email for the account. Defaults to false.")
    production: Optional[StrictBool] = Field(default=None, description="(DEPRECATED) Use base_url instead.")
    username_format: Optional[StrictStr] = Field(default=None, description="A template string for mapping Identity names to MFA method names. Values to substitute should be placed in {{}}. For example, \"{{entity.name}}@example.com\". If blank, the Entity's name field will be used as-is.")
    __properties: ClassVar[List[str]] = ["api_token", "base_url", "method_name", "org_name", "primary_email", "production", "username_format"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MfaCreateOktaMethodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MfaCreateOktaMethodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api_token": obj.get("api_token"),
            "base_url": obj.get("base_url"),
            "method_name": obj.get("method_name"),
            "org_name": obj.get("org_name"),
            "primary_email": obj.get("primary_email"),
            "production": obj.get("production"),
            "username_format": obj.get("username_format")
        })
        return _obj


