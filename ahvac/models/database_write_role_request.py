# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DatabaseWriteRoleRequest(BaseModel):
    """
    DatabaseWriteRoleRequest
    """ # noqa: E501
    creation_statements: Optional[List[StrictStr]] = Field(default=None, description="Specifies the database statements executed to create and configure a user. See the plugin's API page for more information on support and formatting for this parameter.")
    credential_config: Optional[Dict[str, Any]] = Field(default=None, description="The configuration for the given credential_type.")
    credential_type: Optional[StrictStr] = Field(default='password', description="The type of credential to manage. Options include: 'password', 'rsa_private_key'. Defaults to 'password'.")
    db_name: Optional[StrictStr] = Field(default=None, description="Name of the database this role acts on.")
    default_ttl: Optional[StrictStr] = Field(default=None, description="Default ttl for role.")
    max_ttl: Optional[StrictStr] = Field(default=None, description="Maximum time a credential is valid for")
    renew_statements: Optional[List[StrictStr]] = Field(default=None, description="Specifies the database statements to be executed to renew a user. Not every plugin type will support this functionality. See the plugin's API page for more information on support and formatting for this parameter.")
    revocation_statements: Optional[List[StrictStr]] = Field(default=None, description="Specifies the database statements to be executed to revoke a user. See the plugin's API page for more information on support and formatting for this parameter.")
    rollback_statements: Optional[List[StrictStr]] = Field(default=None, description="Specifies the database statements to be executed rollback a create operation in the event of an error. Not every plugin type will support this functionality. See the plugin's API page for more information on support and formatting for this parameter.")
    __properties: ClassVar[List[str]] = ["creation_statements", "credential_config", "credential_type", "db_name", "default_ttl", "max_ttl", "renew_statements", "revocation_statements", "rollback_statements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseWriteRoleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseWriteRoleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation_statements": obj.get("creation_statements"),
            "credential_config": obj.get("credential_config"),
            "credential_type": obj.get("credential_type") if obj.get("credential_type") is not None else 'password',
            "db_name": obj.get("db_name"),
            "default_ttl": obj.get("default_ttl"),
            "max_ttl": obj.get("max_ttl"),
            "renew_statements": obj.get("renew_statements"),
            "revocation_statements": obj.get("revocation_statements"),
            "rollback_statements": obj.get("rollback_statements")
        })
        return _obj


