# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SshConfigureCaRequest(BaseModel):
    """
    SshConfigureCaRequest
    """ # noqa: E501
    generate_signing_key: Optional[StrictBool] = Field(default=True, description="Generate SSH key pair internally rather than use the private_key and public_key fields.")
    key_bits: Optional[StrictInt] = Field(default=0, description="Specifies the desired key bits when generating variable-length keys (such as when key_type=\"ssh-rsa\") or which NIST P-curve to use when key_type=\"ec\" (256, 384, or 521).")
    key_type: Optional[StrictStr] = Field(default='ssh-rsa', description="Specifies the desired key type when generating; could be a OpenSSH key type identifier (ssh-rsa, ecdsa-sha2-nistp256, ecdsa-sha2-nistp384, ecdsa-sha2-nistp521, or ssh-ed25519) or an algorithm (rsa, ec, ed25519).")
    private_key: Optional[StrictStr] = Field(default=None, description="Private half of the SSH key that will be used to sign certificates.")
    public_key: Optional[StrictStr] = Field(default=None, description="Public half of the SSH key that will be used to sign certificates.")
    __properties: ClassVar[List[str]] = ["generate_signing_key", "key_bits", "key_type", "private_key", "public_key"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SshConfigureCaRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SshConfigureCaRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "generate_signing_key": obj.get("generate_signing_key") if obj.get("generate_signing_key") is not None else True,
            "key_bits": obj.get("key_bits") if obj.get("key_bits") is not None else 0,
            "key_type": obj.get("key_type") if obj.get("key_type") is not None else 'ssh-rsa',
            "private_key": obj.get("private_key"),
            "public_key": obj.get("public_key")
        })
        return _obj


