# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DatabaseConfigureConnectionRequest(BaseModel):
    """
    DatabaseConfigureConnectionRequest
    """ # noqa: E501
    allowed_roles: Optional[List[StrictStr]] = Field(default=None, description="Comma separated string or array of the role names allowed to get creds from this database connection. If empty no roles are allowed. If \"*\" all roles are allowed.")
    password_policy: Optional[StrictStr] = Field(default=None, description="Password policy to use when generating passwords.")
    plugin_name: Optional[StrictStr] = Field(default=None, description="The name of a builtin or previously registered plugin known to vault. This endpoint will create an instance of that plugin type.")
    plugin_version: Optional[StrictStr] = Field(default=None, description="The version of the plugin to use.")
    root_rotation_statements: Optional[List[StrictStr]] = Field(default=None, description="Specifies the database statements to be executed to rotate the root user's credentials. See the plugin's API page for more information on support and formatting for this parameter.")
    verify_connection: Optional[StrictBool] = Field(default=True, description="If true, the connection details are verified by actually connecting to the database. Defaults to true.")
    __properties: ClassVar[List[str]] = ["allowed_roles", "password_policy", "plugin_name", "plugin_version", "root_rotation_statements", "verify_connection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatabaseConfigureConnectionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatabaseConfigureConnectionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_roles": obj.get("allowed_roles"),
            "password_policy": obj.get("password_policy"),
            "plugin_name": obj.get("plugin_name"),
            "plugin_version": obj.get("plugin_version"),
            "root_rotation_statements": obj.get("root_rotation_statements"),
            "verify_connection": obj.get("verify_connection") if obj.get("verify_connection") is not None else True
        })
        return _obj


