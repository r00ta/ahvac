# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OidcWriteClientRequest(BaseModel):
    """
    OidcWriteClientRequest
    """ # noqa: E501
    access_token_ttl: Optional[StrictStr] = Field(default='24h', description="The time-to-live for access tokens obtained by the client.")
    assignments: Optional[List[StrictStr]] = Field(default=None, description="Comma separated string or array of assignment resources.")
    client_type: Optional[StrictStr] = Field(default='confidential', description="The client type based on its ability to maintain confidentiality of credentials. The following client types are supported: 'confidential', 'public'. Defaults to 'confidential'.")
    id_token_ttl: Optional[StrictStr] = Field(default='24h', description="The time-to-live for ID tokens obtained by the client.")
    key: Optional[StrictStr] = Field(default='default', description="A reference to a named key resource. Cannot be modified after creation. Defaults to the 'default' key.")
    redirect_uris: Optional[List[StrictStr]] = Field(default=None, description="Comma separated string or array of redirect URIs used by the client. One of these values must exactly match the redirect_uri parameter value used in each authentication request.")
    __properties: ClassVar[List[str]] = ["access_token_ttl", "assignments", "client_type", "id_token_ttl", "key", "redirect_uris"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OidcWriteClientRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OidcWriteClientRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_token_ttl": obj.get("access_token_ttl") if obj.get("access_token_ttl") is not None else '24h',
            "assignments": obj.get("assignments"),
            "client_type": obj.get("client_type") if obj.get("client_type") is not None else 'confidential',
            "id_token_ttl": obj.get("id_token_ttl") if obj.get("id_token_ttl") is not None else '24h',
            "key": obj.get("key") if obj.get("key") is not None else 'default',
            "redirect_uris": obj.get("redirect_uris")
        })
        return _obj


