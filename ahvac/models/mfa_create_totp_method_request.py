# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MfaCreateTotpMethodRequest(BaseModel):
    """
    MfaCreateTotpMethodRequest
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default='SHA1', description="The hashing algorithm used to generate the TOTP token. Options include SHA1, SHA256 and SHA512.")
    digits: Optional[StrictInt] = Field(default=6, description="The number of digits in the generated TOTP token. This value can either be 6 or 8.")
    issuer: Optional[StrictStr] = Field(default=None, description="The name of the key's issuing organization.")
    key_size: Optional[StrictInt] = Field(default=20, description="Determines the size in bytes of the generated key.")
    max_validation_attempts: Optional[StrictInt] = Field(default=None, description="Max number of allowed validation attempts.")
    method_name: Optional[StrictStr] = Field(default=None, description="The unique name identifier for this MFA method.")
    period: Optional[StrictStr] = Field(default='30', description="The length of time used to generate a counter for the TOTP token calculation.")
    qr_size: Optional[StrictInt] = Field(default=200, description="The pixel size of the generated square QR code.")
    skew: Optional[StrictInt] = Field(default=1, description="The number of delay periods that are allowed when validating a TOTP token. This value can either be 0 or 1.")
    __properties: ClassVar[List[str]] = ["algorithm", "digits", "issuer", "key_size", "max_validation_attempts", "method_name", "period", "qr_size", "skew"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MfaCreateTotpMethodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MfaCreateTotpMethodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm") if obj.get("algorithm") is not None else 'SHA1',
            "digits": obj.get("digits") if obj.get("digits") is not None else 6,
            "issuer": obj.get("issuer"),
            "key_size": obj.get("key_size") if obj.get("key_size") is not None else 20,
            "max_validation_attempts": obj.get("max_validation_attempts"),
            "method_name": obj.get("method_name"),
            "period": obj.get("period") if obj.get("period") is not None else '30',
            "qr_size": obj.get("qr_size") if obj.get("qr_size") is not None else 200,
            "skew": obj.get("skew") if obj.get("skew") is not None else 1
        })
        return _obj


