# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransitConfigureKeyRequest(BaseModel):
    """
    TransitConfigureKeyRequest
    """ # noqa: E501
    allow_plaintext_backup: Optional[StrictBool] = Field(default=None, description="Enables taking a backup of the named key in plaintext format. Once set, this cannot be disabled.")
    auto_rotate_period: Optional[StrictStr] = Field(default=None, description="Amount of time the key should live before being automatically rotated. A value of 0 disables automatic rotation for the key.")
    deletion_allowed: Optional[StrictBool] = Field(default=None, description="Whether to allow deletion of the key")
    exportable: Optional[StrictBool] = Field(default=None, description="Enables export of the key. Once set, this cannot be disabled.")
    min_decryption_version: Optional[StrictInt] = Field(default=None, description="If set, the minimum version of the key allowed to be decrypted. For signing keys, the minimum version allowed to be used for verification.")
    min_encryption_version: Optional[StrictInt] = Field(default=None, description="If set, the minimum version of the key allowed to be used for encryption; or for signing keys, to be used for signing. If set to zero, only the latest version of the key is allowed.")
    __properties: ClassVar[List[str]] = ["allow_plaintext_backup", "auto_rotate_period", "deletion_allowed", "exportable", "min_decryption_version", "min_encryption_version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransitConfigureKeyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransitConfigureKeyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_plaintext_backup": obj.get("allow_plaintext_backup"),
            "auto_rotate_period": obj.get("auto_rotate_period"),
            "deletion_allowed": obj.get("deletion_allowed"),
            "exportable": obj.get("exportable"),
            "min_decryption_version": obj.get("min_decryption_version"),
            "min_encryption_version": obj.get("min_encryption_version")
        })
        return _obj


