# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MountsEnableSecretsEngineRequest(BaseModel):
    """
    MountsEnableSecretsEngineRequest
    """ # noqa: E501
    config: Optional[Dict[str, Any]] = Field(default=None, description="Configuration for this mount, such as default_lease_ttl and max_lease_ttl.")
    description: Optional[StrictStr] = Field(default=None, description="User-friendly description for this mount.")
    external_entropy_access: Optional[StrictBool] = Field(default=False, description="Whether to give the mount access to Vault's external entropy.")
    local: Optional[StrictBool] = Field(default=False, description="Mark the mount as a local mount, which is not replicated and is unaffected by replication.")
    options: Optional[Dict[str, Any]] = Field(default=None, description="The options to pass into the backend. Should be a json object with string keys and values.")
    plugin_name: Optional[StrictStr] = Field(default=None, description="Name of the plugin to mount based from the name registered in the plugin catalog.")
    plugin_version: Optional[StrictStr] = Field(default=None, description="The semantic version of the plugin to use, or image tag if oci_image is provided.")
    seal_wrap: Optional[StrictBool] = Field(default=False, description="Whether to turn on seal wrapping for the mount.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the backend. Example: \"passthrough\"")
    __properties: ClassVar[List[str]] = ["config", "description", "external_entropy_access", "local", "options", "plugin_name", "plugin_version", "seal_wrap", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MountsEnableSecretsEngineRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MountsEnableSecretsEngineRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": obj.get("config"),
            "description": obj.get("description"),
            "external_entropy_access": obj.get("external_entropy_access") if obj.get("external_entropy_access") is not None else False,
            "local": obj.get("local") if obj.get("local") is not None else False,
            "options": obj.get("options"),
            "plugin_name": obj.get("plugin_name"),
            "plugin_version": obj.get("plugin_version"),
            "seal_wrap": obj.get("seal_wrap") if obj.get("seal_wrap") is not None else False,
            "type": obj.get("type")
        })
        return _obj


