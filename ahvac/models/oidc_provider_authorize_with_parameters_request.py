# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OidcProviderAuthorizeWithParametersRequest(BaseModel):
    """
    OidcProviderAuthorizeWithParametersRequest
    """ # noqa: E501
    client_id: StrictStr = Field(description="The ID of the requesting client.")
    code_challenge: Optional[StrictStr] = Field(default=None, description="The code challenge derived from the code verifier.")
    code_challenge_method: Optional[StrictStr] = Field(default='plain', description="The method that was used to derive the code challenge. The following methods are supported: 'S256', 'plain'. Defaults to 'plain'.")
    max_age: Optional[StrictInt] = Field(default=None, description="The allowable elapsed time in seconds since the last time the end-user was actively authenticated.")
    nonce: Optional[StrictStr] = Field(default=None, description="The value that will be returned in the ID token nonce claim after a token exchange.")
    redirect_uri: StrictStr = Field(description="The redirection URI to which the response will be sent.")
    response_type: StrictStr = Field(description="The OIDC authentication flow to be used. The following response types are supported: 'code'")
    scope: StrictStr = Field(description="A space-delimited, case-sensitive list of scopes to be requested. The 'openid' scope is required.")
    state: Optional[StrictStr] = Field(default=None, description="The value used to maintain state between the authentication request and client.")
    __properties: ClassVar[List[str]] = ["client_id", "code_challenge", "code_challenge_method", "max_age", "nonce", "redirect_uri", "response_type", "scope", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OidcProviderAuthorizeWithParametersRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OidcProviderAuthorizeWithParametersRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_id": obj.get("client_id"),
            "code_challenge": obj.get("code_challenge"),
            "code_challenge_method": obj.get("code_challenge_method") if obj.get("code_challenge_method") is not None else 'plain',
            "max_age": obj.get("max_age"),
            "nonce": obj.get("nonce"),
            "redirect_uri": obj.get("redirect_uri"),
            "response_type": obj.get("response_type"),
            "scope": obj.get("scope"),
            "state": obj.get("state")
        })
        return _obj


