# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KubernetesConfigureAuthRequest(BaseModel):
    """
    KubernetesConfigureAuthRequest
    """ # noqa: E501
    disable_iss_validation: Optional[StrictBool] = Field(default=True, description="Disable JWT issuer validation (Deprecated, will be removed in a future release)")
    disable_local_ca_jwt: Optional[StrictBool] = Field(default=False, description="Disable defaulting to the local CA cert and service account JWT when running in a Kubernetes pod")
    issuer: Optional[StrictStr] = Field(default=None, description="Optional JWT issuer. If no issuer is specified, then this plugin will use kubernetes.io/serviceaccount as the default issuer. (Deprecated, will be removed in a future release)")
    kubernetes_ca_cert: Optional[StrictStr] = Field(default=None, description="PEM encoded CA cert for use by the TLS client used to talk with the API.")
    kubernetes_host: Optional[StrictStr] = Field(default=None, description="Host must be a host string, a host:port pair, or a URL to the base of the Kubernetes API server.")
    pem_keys: Optional[List[StrictStr]] = Field(default=None, description="Optional list of PEM-formated public keys or certificates used to verify the signatures of kubernetes service account JWTs. If a certificate is given, its public key will be extracted. Not every installation of Kubernetes exposes these keys.")
    token_reviewer_jwt: Optional[StrictStr] = Field(default=None, description="A service account JWT used to access the TokenReview API to validate other JWTs during login. If not set the JWT used for login will be used to access the API.")
    __properties: ClassVar[List[str]] = ["disable_iss_validation", "disable_local_ca_jwt", "issuer", "kubernetes_ca_cert", "kubernetes_host", "pem_keys", "token_reviewer_jwt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubernetesConfigureAuthRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubernetesConfigureAuthRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disable_iss_validation": obj.get("disable_iss_validation") if obj.get("disable_iss_validation") is not None else True,
            "disable_local_ca_jwt": obj.get("disable_local_ca_jwt") if obj.get("disable_local_ca_jwt") is not None else False,
            "issuer": obj.get("issuer"),
            "kubernetes_ca_cert": obj.get("kubernetes_ca_cert"),
            "kubernetes_host": obj.get("kubernetes_host"),
            "pem_keys": obj.get("pem_keys"),
            "token_reviewer_jwt": obj.get("token_reviewer_jwt")
        })
        return _obj


