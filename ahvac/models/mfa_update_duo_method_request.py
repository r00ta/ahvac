# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MfaUpdateDuoMethodRequest(BaseModel):
    """
    MfaUpdateDuoMethodRequest
    """ # noqa: E501
    api_hostname: Optional[StrictStr] = Field(default=None, description="API host name for Duo.")
    integration_key: Optional[StrictStr] = Field(default=None, description="Integration key for Duo.")
    method_name: Optional[StrictStr] = Field(default=None, description="The unique name identifier for this MFA method.")
    push_info: Optional[StrictStr] = Field(default=None, description="Push information for Duo.")
    secret_key: Optional[StrictStr] = Field(default=None, description="Secret key for Duo.")
    use_passcode: Optional[StrictBool] = Field(default=None, description="If true, the user is reminded to use the passcode upon MFA validation. This option does not enforce using the passcode. Defaults to false.")
    username_format: Optional[StrictStr] = Field(default=None, description="A template string for mapping Identity names to MFA method names. Values to subtitute should be placed in {{}}. For example, \"{{alias.name}}@example.com\". Currently-supported mappings: alias.name: The name returned by the mount configured via the mount_accessor parameter If blank, the Alias's name field will be used as-is.")
    __properties: ClassVar[List[str]] = ["api_hostname", "integration_key", "method_name", "push_info", "secret_key", "use_passcode", "username_format"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MfaUpdateDuoMethodRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MfaUpdateDuoMethodRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api_hostname": obj.get("api_hostname"),
            "integration_key": obj.get("integration_key"),
            "method_name": obj.get("method_name"),
            "push_info": obj.get("push_info"),
            "secret_key": obj.get("secret_key"),
            "use_passcode": obj.get("use_passcode"),
            "username_format": obj.get("username_format")
        })
        return _obj


