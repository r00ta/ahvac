# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransitImportKeyRequest(BaseModel):
    """
    TransitImportKeyRequest
    """ # noqa: E501
    allow_plaintext_backup: Optional[StrictBool] = Field(default=None, description="Enables taking a backup of the named key in plaintext format. Once set, this cannot be disabled.")
    allow_rotation: Optional[StrictBool] = Field(default=None, description="True if the imported key may be rotated within Vault; false otherwise.")
    auto_rotate_period: Optional[StrictStr] = Field(default='0', description="Amount of time the key should live before being automatically rotated. A value of 0 (default) disables automatic rotation for the key.")
    ciphertext: Optional[StrictStr] = Field(default=None, description="The base64-encoded ciphertext of the keys. The AES key should be encrypted using OAEP with the wrapping key and then concatenated with the import key, wrapped by the AES key.")
    context: Optional[StrictStr] = Field(default=None, description="Base64 encoded context for key derivation. When reading a key with key derivation enabled, if the key type supports public keys, this will return the public key for the given context.")
    derived: Optional[StrictBool] = Field(default=None, description="Enables key derivation mode. This allows for per-transaction unique keys for encryption operations.")
    exportable: Optional[StrictBool] = Field(default=None, description="Enables keys to be exportable. This allows for all the valid keys in the key ring to be exported.")
    hash_function: Optional[StrictStr] = Field(default='SHA256', description="The hash function used as a random oracle in the OAEP wrapping of the user-generated, ephemeral AES key. Can be one of \"SHA1\", \"SHA224\", \"SHA256\" (default), \"SHA384\", or \"SHA512\"")
    public_key: Optional[StrictStr] = Field(default=None, description="The plaintext PEM public key to be imported. If \"ciphertext\" is set, this field is ignored.")
    type: Optional[StrictStr] = Field(default='aes256-gcm96', description="The type of key being imported. Currently, \"aes128-gcm96\" (symmetric), \"aes256-gcm96\" (symmetric), \"ecdsa-p256\" (asymmetric), \"ecdsa-p384\" (asymmetric), \"ecdsa-p521\" (asymmetric), \"ed25519\" (asymmetric), \"rsa-2048\" (asymmetric), \"rsa-3072\" (asymmetric), \"rsa-4096\" (asymmetric) are supported. Defaults to \"aes256-gcm96\".")
    __properties: ClassVar[List[str]] = ["allow_plaintext_backup", "allow_rotation", "auto_rotate_period", "ciphertext", "context", "derived", "exportable", "hash_function", "public_key", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransitImportKeyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransitImportKeyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_plaintext_backup": obj.get("allow_plaintext_backup"),
            "allow_rotation": obj.get("allow_rotation"),
            "auto_rotate_period": obj.get("auto_rotate_period") if obj.get("auto_rotate_period") is not None else '0',
            "ciphertext": obj.get("ciphertext"),
            "context": obj.get("context"),
            "derived": obj.get("derived"),
            "exportable": obj.get("exportable"),
            "hash_function": obj.get("hash_function") if obj.get("hash_function") is not None else 'SHA256',
            "public_key": obj.get("public_key"),
            "type": obj.get("type") if obj.get("type") is not None else 'aes256-gcm96'
        })
        return _obj


