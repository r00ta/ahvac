# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppRoleWriteCustomSecretIdRequest(BaseModel):
    """
    AppRoleWriteCustomSecretIdRequest
    """ # noqa: E501
    cidr_list: Optional[List[StrictStr]] = Field(default=None, description="Comma separated string or list of CIDR blocks enforcing secret IDs to be used from specific set of IP addresses. If 'bound_cidr_list' is set on the role, then the list of CIDR blocks listed here should be a subset of the CIDR blocks listed on the role.")
    metadata: Optional[StrictStr] = Field(default=None, description="Metadata to be tied to the SecretID. This should be a JSON formatted string containing metadata in key value pairs.")
    num_uses: Optional[StrictInt] = Field(default=None, description="Number of times this SecretID can be used, after which the SecretID expires. Overrides secret_id_num_uses role option when supplied. May not be higher than role's secret_id_num_uses.")
    secret_id: Optional[StrictStr] = Field(default=None, description="SecretID to be attached to the role.")
    token_bound_cidrs: Optional[List[StrictStr]] = Field(default=None, description="Comma separated string or list of CIDR blocks. If set, specifies the blocks of IP addresses which can use the returned token. Should be a subset of the token CIDR blocks listed on the role, if any.")
    ttl: Optional[StrictStr] = Field(default=None, description="Duration in seconds after which this SecretID expires. Overrides secret_id_ttl role option when supplied. May not be longer than role's secret_id_ttl.")
    __properties: ClassVar[List[str]] = ["cidr_list", "metadata", "num_uses", "secret_id", "token_bound_cidrs", "ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppRoleWriteCustomSecretIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppRoleWriteCustomSecretIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cidr_list": obj.get("cidr_list"),
            "metadata": obj.get("metadata"),
            "num_uses": obj.get("num_uses"),
            "secret_id": obj.get("secret_id"),
            "token_bound_cidrs": obj.get("token_bound_cidrs"),
            "ttl": obj.get("ttl")
        })
        return _obj


