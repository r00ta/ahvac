# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LdapWriteDynamicRoleRequest(BaseModel):
    """
    LdapWriteDynamicRoleRequest
    """ # noqa: E501
    creation_ldif: StrictStr = Field(description="LDIF string used to create new entities within the LDAP system. This LDIF can be templated.")
    default_ttl: Optional[StrictStr] = Field(default=None, description="Default TTL for dynamic credentials")
    deletion_ldif: StrictStr = Field(description="LDIF string used to delete entities created within the LDAP system. This LDIF can be templated.")
    max_ttl: Optional[StrictStr] = Field(default=None, description="Max TTL a dynamic credential can be extended to")
    rollback_ldif: Optional[StrictStr] = Field(default=None, description="LDIF string used to rollback changes in the event of a failure to create credentials. This LDIF can be templated.")
    username_template: Optional[StrictStr] = Field(default=None, description="The template used to create a username")
    __properties: ClassVar[List[str]] = ["creation_ldif", "default_ttl", "deletion_ldif", "max_ttl", "rollback_ldif", "username_template"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LdapWriteDynamicRoleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LdapWriteDynamicRoleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creation_ldif": obj.get("creation_ldif"),
            "default_ttl": obj.get("default_ttl"),
            "deletion_ldif": obj.get("deletion_ldif"),
            "max_ttl": obj.get("max_ttl"),
            "rollback_ldif": obj.get("rollback_ldif"),
            "username_template": obj.get("username_template")
        })
        return _obj


