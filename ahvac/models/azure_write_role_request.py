# coding: utf-8

"""
    HashiCorp Vault API

    HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.

    The version of the OpenAPI document: 1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AzureWriteRoleRequest(BaseModel):
    """
    AzureWriteRoleRequest
    """ # noqa: E501
    application_object_id: Optional[StrictStr] = Field(default=None, description="Application Object ID to use for static service principal credentials.")
    azure_groups: Optional[StrictStr] = Field(default=None, description="JSON list of Azure groups to add the service principal to.")
    azure_roles: Optional[StrictStr] = Field(default=None, description="JSON list of Azure roles to assign.")
    max_ttl: Optional[StrictStr] = Field(default=None, description="Maximum time a service principal. If not set or set to 0, will use system default.")
    permanently_delete: Optional[StrictBool] = Field(default=False, description="Indicates whether new application objects should be permanently deleted. If not set, objects will not be permanently deleted.")
    persist_app: Optional[StrictBool] = Field(default=False, description="Persist the app between generated credentials. Useful if the app needs to maintain owner ship of resources it creates")
    ttl: Optional[StrictStr] = Field(default=None, description="Default lease for generated credentials. If not set or set to 0, will use system default.")
    __properties: ClassVar[List[str]] = ["application_object_id", "azure_groups", "azure_roles", "max_ttl", "permanently_delete", "persist_app", "ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureWriteRoleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureWriteRoleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application_object_id": obj.get("application_object_id"),
            "azure_groups": obj.get("azure_groups"),
            "azure_roles": obj.get("azure_roles"),
            "max_ttl": obj.get("max_ttl"),
            "permanently_delete": obj.get("permanently_delete") if obj.get("permanently_delete") is not None else False,
            "persist_app": obj.get("persist_app") if obj.get("persist_app") is not None else False,
            "ttl": obj.get("ttl")
        })
        return _obj


